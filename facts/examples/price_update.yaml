description: "Example showing how to update just fuel prices without changing other station facts"
scenario:
  - "Existing station with established fuel types and amenities"
  - "Price changes due to market fluctuations"
  - "Only prices need updating"

price_only_update:
  # Update only fuel prices - no need to resubmit fuel types or amenities
  octane_87_cash:
    value: "3.579"
    currency: "USD"
    volume: "gallons"
  octane_87_credit:
    value: "3.609"
    currency: "USD"
    volume: "gallons"
  octane_91_cash:
    value: "3.979"
    currency: "USD"
    volume: "gallons"
  octane_91_credit:
    value: "4.009"
    currency: "USD"
    volume: "gallons"
  diesel_cash:
    value: "3.769"
    currency: "USD"
    volume: "gallons"
  diesel_credit:
    value: "3.799"
    currency: "USD"
    volume: "gallons"

advantages_of_granular_updates:
  - "Efficiency: Only submit changed data"
  - "Bandwidth: Smaller payloads"
  - "Audit Trail: Clear record of what changed"
  - "Dependencies: Existing fuel types remain valid"
  - "Atomicity: All price changes applied together"

price_confirmation_flow:
  description: "After submission, prices can be confirmed by other users"
  example_confirmation:
    octane_87_cash:
      value: "3.579"
      currency: "USD" 
      volume: "gallons"
  note: "Users can confirm prices at different intervals based on app logic and user permissions"

swift_implementation:
  service_call: "await GroundTruthService.saveFacts(identifier: stationIdentifier, facts: factEdits)"
  
notes: |
  - Only changed facts need to be submitted
  - Price updates are atomic transactions
  - Existing fuel availability facts remain valid
  - Same pricing patterns as complete station setup